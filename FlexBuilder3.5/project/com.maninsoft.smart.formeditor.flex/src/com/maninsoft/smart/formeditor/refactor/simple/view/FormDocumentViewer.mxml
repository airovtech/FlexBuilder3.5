<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:layout="com.maninsoft.smart.formeditor.refactor.layout.*" 
	xmlns:form="com.maninsoft.smart.formeditor.refactor.view.form.*" xmlns:net="flash.net.*"
	xmlns:common="com.maninsoft.smart.formeditor.refactor.view.common.*"
	xmlns:mapping="com.maninsoft.smart.formeditor.refactor.view.mapping.*" 
	xmlns:form1="com.maninsoft.smart.formeditor.refactor.simple.view.form.*" 
	xmlns:mapping1="com.maninsoft.smart.formeditor.refactor.simple.view.mapping.*"
	creationComplete="init()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">
<!--	<mx:Style source="/assets/css/activityStyle.css"/>
-->	<mx:Style>
		.nomalLabel{
				fontFamily: MALGUN;
				fontAntiAliasType: advanced;
				fontWeight: normal;	
				horizontalGap: 5;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.controls.Button;
			import mx.messaging.config.ServerConfig;
			import com.maninsoft.smart.workbench.common.editor.EditDomain;
			import com.maninsoft.smart.formeditor.refactor.simple.util.FormDocumentCommandUtil;
			import com.maninsoft.smart.formeditor.refactor.event.service.WorklistServiceEvent;
			import com.maninsoft.smart.formeditor.refactor.event.service.WorkTypeEvent;
			import com.maninsoft.smart.formeditor.refactor.util.ProcessFormSelectWindow;
			import com.maninsoft.smart.formeditor.refactor.view.common.FormDocumentSchemaTree;
			import mx.controls.Text;
			import com.maninsoft.smart.formeditor.model.IFormResource;
			import com.maninsoft.smart.formeditor.refactor.event.service.ServiceEvent;
			import com.maninsoft.smart.workbench.common.meta.impl.SWForm;
			import com.maninsoft.smart.workbench.common.util.MsgUtil;
			import com.maninsoft.smart.formeditor.util.FormEditorConfig;
			import com.maninsoft.smart.formeditor.refactor.util.FormSelectWindow;
			import com.maninsoft.smart.formeditor.refactor.event.service.FormPersistenceEvent;
			import com.maninsoft.smart.formeditor.refactor.service.impl.ServerFormPersistenceService;
			import com.maninsoft.smart.formeditor.refactor.service.IFormPersistenceService;
			import com.maninsoft.smart.workbench.common.util.ResultWindow;
			import mx.core.IFlexDisplayObject;
			import mx.managers.PopUpManager;
			import com.maninsoft.smart.workbench.common.command.model.Command;
			import mx.collections.ArrayCollection;
			import mx.automation.codec.ArrayPropertyCodec;
			import com.maninsoft.smart.formeditor.refactor.command.UpdateFormEntityCommand;
			import com.maninsoft.smart.formeditor.refactor.event.FormEditEvent;
			import com.maninsoft.smart.formeditor.model.FormEntity;
			import mx.events.ItemClickEvent;
			import com.maninsoft.smart.formeditor.refactor.Constants;
			import com.maninsoft.smart.formeditor.assets.IconLibrary;
			import com.maninsoft.smart.formeditor.refactor.command.UpdateFormModelCommand;
			import com.maninsoft.smart.formeditor.model.FormDocument;
			import  com.maninsoft.smart.formeditor.refactor.editor.FormEditDomain
			import mx.controls.tabBarClasses.*;
			
			[Bindable]
			public var editDomain:FormEditDomain;
			
			[Bindable]
			public var formModel:FormDocument;
			
			[Bindable]
			private var formEntityModel:FormEntity;
			
			[Bindable]
			public var miniMode:Boolean;
			
			[Bindable]
			public var buildTimeMode:Boolean = true;
			
			[Bindable]
			private var _swForm:SWForm;
			
			// 초기화
			private function init():void{
				registerEvent();
			}
			
			// 초기화
			public function load(swForm:SWForm):void{

				this._swForm = swForm;
				
				editDomain = new FormEditDomain(FormEditorConfig.serviceUrl);
				
				// 초기화 비주얼 아이템
				formModelEditPartViewer.initVisual();
				
				loadForm();	
//				loadWorkType();		
//				checkModel();		
				
//				formView.selectedIndex = 0;
			}
			
			// 외부에서 현재 로드중인 폼의 메타정보 획득
			public function get swForm():SWForm{
				return this._swForm;
			}
			
			// 기본 이벤트 등록
			private function registerEvent():void {
				
//				this.addEventListener(FormEditEvent.SELECT_FORM_ITEM, selectFormHandler, true);
//				this.addEventListener(FormEditEvent.SELECT_FORM_ITEMS, selectFormHandler, true);
//				this.addEventListener(FormEditEvent.SELECT_FORM_DOCUMENT, selectFormHandler, true);
			}

			private var selectionFormResources:ArrayCollection = new ArrayCollection();
			
			public function selectFormResource(formResources:ArrayCollection):void {
				selectionFormResources.removeAll();
					
				for each(var formResource:IFormResource in formResources){
						selectionFormResources.addItem(formResource);
				}
				
				formModelEditPartViewer.select(selectionFormResources);
			}
			
//			private function selectRefFormField():void{
//				this.exprInput.text = this.exprInput.text + "{" + this.refFormFieldCombo.selectedItem.@name + "}";
//				updateExpression(this.exprInput.text);
//			}
			
//			[Bindable]
//			private var selectRefFormWin:FormSelectWindow;
			// 참조 폼 선택 처리
			// 1. 폼 참조를 위한 창을 팝업으로 띄운다
//			private function selectRefForm():void{
//				selectRefFormWin = FormSelectWindow(PopUpManager.createPopUp(this,FormSelectWindow,true));
//				selectRefFormWin.addEventListener(Event.COMPLETE, completeRefForm);
//				selectRefFormWin.start();
//				
//				PopUpManager.centerPopUp(selectRefFormWin);
//			}   
//			// 참조 폼 선택이 끝난 후 처리
//			private function completeRefForm():void{
//				// 결과값 설정
//				this.refFormId = selectRefFormWin.formId;
//				this.refFormModel = selectRefFormWin.formModel;
//				
//				// 모델에 반영
//				var command:UpdateFormModelCommand = new UpdateFormModelCommand(this.formModel.name);
//				command.formModel = this.formModel;
//				command.newValue = this.refFormId;
//				command.type = FormDocument.PROP_REFFORMID;
//				
//				this.editDomain.getCommandStack().execute(command);
//			}
			/******************** 서버 통신 **************************/
			// 폼 저장
			public function saveForm():void{
				editDomain.serviceClient.formService.save(this.swForm.id, this.swForm.version, this.formModel.toXML(), saveResult, serviceFault);
			}
			// 폼 로드
			public function loadForm():void{
				editDomain.serviceClient.formService.load(this.swForm.id, this.swForm.version, loadResult, serviceFault);			
			}
			// 폼 저장결과
			private function saveResult(event:FormPersistenceEvent):void{
				MsgUtil.showMsg(event.msg);		
				dispatchEvent(new Event("saveFormComplete"));	
			}
			// 폼 로드 결과
			private function loadResult(event:FormPersistenceEvent):void{
				this.formModel = event.formModel;
				checkModel();
				this.formModel.setResourceMetaModel(this.swForm);	
				dispatchEvent(new FormEditEvent(FormEditEvent.LOAD_FORM_DOCUMENT));	
			}
			// 워크타입 로드 결과
//			private function loadWorkTypeResult(event:WorkTypeEvent):void{
//				this.swForm.swWorkType = event.swWorkType;
//				loadWorkTypeMapping();	
//			}
			// 워크타입 맵핑 로드 결과
//			private function loadWorkTypeMappingResult(event:WorkTypeEvent):void{
//				this.swForm.swWorkType = event.swWorkType;
//				if(prcInputMappingCanvas != null)
//					prcInputMappingCanvas.refreshVisual();
//			}
			// 모델이 존재하는 지를 체크하고 없으면 모델생성
			private function checkModel():void{
				if(this.formModel == null){
					this.formModel = new FormDocument();
					this.formModel.id = this.swForm.id;
					this.formModel.name = this.swForm.name;
				}						
			}
			// 폼  서비스 실
			private function serviceFault(event:ServiceEvent):void{
				MsgUtil.showError(event.msg);
			}
			/***************************그리기******************************/
			public function refreshVisual():void{
				formModelEditPartViewer.refreshVisual();
			}
			
			private function getTopSize(screenHeight:int, formHeight:int, scalePercent:int):int{
//				if((screenHeight - (formHeight * (scalePercent / 100))) < 0){
//					return 10;
//				}else{
//					return (screenHeight - (formHeight * (scalePercent / 100))) / 2;
//				}
				return 10;
			}
			
			private function getSideSize(screenWidth:int, formWidth:int, scalePercent:int):int{
				if((screenWidth - (formWidth* (scalePercent / 100))) < 0){
					return 0;
				}else{
					return (screenWidth - (formWidth * (scalePercent / 100))) / 2;
				}
			}
			/************트리****************/
			public function set valueXML(valueXML:XML):void{
				formModelEditPartViewer.valueXml = valueXML;
			}
			
			public function get valueXML():XML{
				return formModelEditPartViewer.valueXml;
			}
			
//			public function fullForm():void{
//				var scalePercent:Number;
//				
//				scalePercent = formScreen.width / this.formModel.width * 100;
//				
//				if(scalePercent > (formScreen.height / this.formModel.height * 100)){
//					scalePercent = formScreen.height / this.formModel.height * 100;
//				}
//				
//				FormDocumentCommandUtil.executeUpdateFormDocumentProperty(this.editDomain, this.formModel, 
//					scalePercent , FormDocument.PROP_SCALE);
//			}
			]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="saveFormComplete", type="flash.events.Event")]
		[Event(name="loadFormDocument", type="com.maninsoft.smart.formeditor.refactor.event.FormEditEvent")]
	</mx:Metadata>
	<!--<mx:VBox id="workspace" x="0" y="0" width="100%" height="100%" verticalGap="0"> 
		<mx:HBox height="{(this.miniMode)?0:20}" width="100%" horizontalGap="0" visible="{!this.miniMode}">
			<mx:TextInput id="formNameBar" width="100%" height="100%" textAlign="left" fontSize="12" fontFamily="Arial"
				 editable="true" borderStyle="solid" alpha="0.85" backgroundColor="#FFFFFF"
				 text="{formModel.title}" change="{FormDocumentCommandUtil.executeUpdateFormDocumentProperty(this.editDomain, this.formModel, this.formNameBar.text, FormDocument.PROP_NAME)}">		
			</mx:TextInput>
			<mx:Button id="minusFormDocSacle" label="-" toolTip="10% 줄이기"
				click="{minusScale()}" width="20"/> 
			<mx:HSlider id="formDocumentScale" right="10" value="{this.formModel.scalePercent / 100}" 
				change="{FormDocumentCommandUtil.executeUpdateFormDocumentProperty(this.editDomain, this.formModel, formDocumentScale.value * 100, FormDocument.PROP_SCALE)}" 
				allowTrackClick="true" minimum="0.5" maximum="2" liveDragging="true"/>
			<mx:Button id="plusFormDocSacle" label="+" toolTip="10% 늘이기"
				click="{plusScale()}" width="20"/>
		</mx:HBox>-->
		<mx:ViewStack id="formEditorView" x="0" y="0" width="{this.width - 49}" height="100%"
			borderStyle="solid" borderThickness="1" backgroundColor="#FFFFFF"
			shadowDirection="left" shadowDistance="2"><!-- cornerRadius="10" -->
			<mx:Canvas label="화면">
				<mx:Canvas id="formScreen" label="화면편집"
					top="10" left="8" right="5" bottom="8" 
					horizontalScrollBarStyleName="HScrollBar" verticalScrollBarStyleName="VScrollBar"><!-- borderStyle="solid"-->
					<form1:FormDocumentRootViewer id="formModelEditPartViewer"
						x="{getSideSize(formScreen.width - 15, this.formModel.width, 100)}" 
						y="{getTopSize(formScreen.height, this.formModel.height, 100)}"  				
						editDomain="{this.editDomain}" formModel="{this.formModel}"
						scaleX="{100 / 100}" scaleY="{100 / 100}" 
						> 
					</form1:FormDocumentRootViewer>
				</mx:Canvas>
			</mx:Canvas> 
			<mapping1:FormMappingEditor id="mappingEditor"  label="데이타" 
				editDomain="{this.editDomain}" formDocument="{this.formModel}" 
				width="{this.width - 10}" height="{this.height - 60}" swForm="{this.swForm}"/>
		</mx:ViewStack>
		
		<mx:VBox right="4" top="0" borderStyle="solid"  visible="{formEditorView.selectedIndex == 0}"
			borderThickness="1" borderColor="#878787" borderSides="left" backgroundSize="100%" 
			verticalGap="2" horizontalAlign="center" paddingTop="5"  paddingLeft="2" >
			<!--mx:Button width="39" height="19" id="realBtn" scaleX="0.8"
				styleName="realSizeBtn"
				click="{FormDocumentCommandUtil.executeUpdateFormDocumentProperty(this.editDomain, this.formModel, 
						100 , FormDocument.PROP_SCALE)}" 
				/>
			<mx:Button width="39" height="19" id="fulllBtn" scaleX="0.8"
				styleName="processFitMap"
				click="{fullForm()}" 
				/>
			<mx:Panel width="36" height="93" layout="absolute" scaleX="0.8"
				  styleName="sliderBg"> 
				<mx:Button y="2" x="3" id="plusFormDocSacle" toolTip="10% 늘이기"
					width="30" height="14" 
					styleName="processPlus"/>
				<mx:VSlider id="formDocumentScale" y="16" x="1" 
					value="{100 / 100}" 
					change="{FormDocumentCommandUtil.executeUpdateFormDocumentProperty(this.editDomain, this.formModel, formDocumentScale.value * 100, FormDocument.PROP_SCALE)}" 
					allowTrackClick="true" minimum="0.5" maximum="2" liveDragging="true"
					styleName="PSlider" 
					width="30" height="60" />
				<mx:Button id="minusFormDocSacle" toolTip="10% 줄이기"
					y="76" x="3"
					width="30" height="14" 
					styleName="processMinus"/>
			</mx:Panel-->
		</mx:VBox>

		<!--<mx:TabBar id="formTabBar" x="{formEditorView.width + 22}" y="15" width="177" height="24" rotation="90" dataProvider="{formEditorView}"
			tabStyleName="nomalLabel" selectedTabTextStyleName="nomalLabel">
		</mx:TabBar>--><!--direction="vertical" -->
		<!-- right="{getSideSize(formScreen.width, this.formModel.width, this.formModel.scalePercent)}" -->
<!--		<mx:ViewStack id="formView" width="100%" height="100%" selectedIndex="0">
	
			<mx:Canvas id="mappingScreen" label="맵핑편집" width="100%" height="100%" backgroundColor="#7DAEEB" visible="{this.swForm.swWorkType != null}">
				<mx:VDividedBox x="0" y="0" width="100%" height="100%" verticalGap="3">
					<mx:VBox width="100%" height="50%" backgroundColor="#FFFFFF">
						<mx:Text text="프로세스" height="18" width="100%" fontSize="12" fontWeight="bold"/>
						<mapping:ProcessInputFormMappingEditor id="prcInputMappingCanvas" label="시작" width="100%" height="100%"
								formModel="{this.formModel}" swForm="{this._swForm}"/>					
					</mx:VBox>
					<mx:VBox width="100%" height="50%" backgroundColor="#FFFFFF">
						<mx:Text text="폼" height="18" width="100%" fontSize="12" fontWeight="bold"/>
						<mx:TabNavigator width="100%" height="100%">
							<mx:Canvas id="formInputMappingCanvas" label="시작" width="100%" height="100%">
								
							</mx:Canvas>
							<mx:Canvas id="formOutputMappingCanvas" label="종료" width="100%" height="100%">
								
							</mx:Canvas>						
						</mx:TabNavigator>
					</mx:VBox>
				</mx:VDividedBox>
			</mx:Canvas>
			<mx:Canvas id="workTypeScreen" label="작업편집" width="100%" height="100%" backgroundColor="#7DAEEB" visible="{this.swForm.swWorkType != null}">
				
			</mx:Canvas>
		</mx:ViewStack>
		<mx:HBox>
			<mx:TabBar id="swFormTab" dataProvider="formView" fontSize="12" visible="{buildTimeMode}" width="239" height="{buildTimeMode?25:0}"/>
		</mx:HBox>		
	</mx:VBox>-->
</mx:Canvas>
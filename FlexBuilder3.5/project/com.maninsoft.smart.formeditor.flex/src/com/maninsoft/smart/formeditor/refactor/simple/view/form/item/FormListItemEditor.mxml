<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">
	<mx:Script>
			<![CDATA[
				import mx.controls.RadioButton;
				import com.maninsoft.smart.formeditor.refactor.view.property.detail.FormListType;
				import mx.collections.ArrayCollection;
				import com.maninsoft.smart.formeditor.refactor.Constants;
				import com.maninsoft.smart.formeditor.model.format.FormatTypes;
				import com.maninsoft.smart.formeditor.model.FormEntity;
				
				public static var targetFormItem:FormEntity;
				
				private var _formItem:FormEntity;
				
				private function loadFormItem(formItem:FormEntity):void{
					this._formItem = formItem;
					
					var idx:int = getContentsIndex(this._formItem);
							switch(idx){
								case 0:// 라디오
									for each(var childObj:DisplayObject in this.valueRadioBox.getChildren()){
										if(childObj is RadioButton){
											this.valueRadioBox.removeChild(childObj);
										}
									}
									for each(var staticExample:String in formItem.format.staticListExamples){
										var valueRadioBtn:RadioButton = new RadioButton();
										valueRadioBtn.label = staticExample;
										valueRadioBtn.value = staticExample;
										valueRadioBtn.group = this.valueRadio;
										valueRadioBtn.enabled = !formItem.readOnly;
										this.valueRadioBox.addChild(valueRadioBtn);
									}	
									break;
								case 1:// 콤보
									if(formItem.format.listType == FormListType.STATIC){
										this.valueCombo.dataProvider = formItem.format.staticListExamples;	
									}	
									valueCombo.editable = !formItem.readOnly;
									break;
								case 2:// 데이트
									var disableDayArray:Array = new Array();
									
									if(formItem.format.sunNotUse)
										disableDayArray.push(0);
									if(formItem.format.monNotUse)
										disableDayArray.push(1);
									if(formItem.format.tueNotUse)
										disableDayArray.push(2);
									if(formItem.format.wedNotUse)
										disableDayArray.push(3);
									if(formItem.format.thuNotUse)
										disableDayArray.push(4);
									if(formItem.format.friNotUse)
										disableDayArray.push(5);
									if(formItem.format.satNotUse) 
										disableDayArray.push(6);						
																
									this.valueDateField.disabledDays = disableDayArray;
									
									this.valueDateField.yearNavigationEnabled = formItem.format.yearUse;
									
									valueDateField.editable = !formItem.readOnly;
									break;
								case 3:// 뉴머릭
									if(formItem.format.minNumUse)
										this.valueNumericStepper.minimum = formItem.format.minNum;
									if(formItem.format.maxNumUse)
										this.valueNumericStepper.maximum = formItem.format.maxNum; 
										
									this.valueNumericStepper.stepSize = formItem.format.stepSize;	
									valueNumericStepper.enabled = !formItem.readOnly;
									break;
								case 6:// 그리드
									break;
								case 7:// text area
									break;
								default:// 텍스트
							}
							
					this.valueView.selectedIndex = idx;
				}
				
				private function getContentsIndex(formEntity:FormEntity):int{
					if(formEntity.format.type == FormatTypes.radioButton.type)
						return 0;	
					else if(formEntity.format.type == FormatTypes.comboBox.type)
						return 1;	
					else if(formEntity.format.type == FormatTypes.dateChooser.type)
						return 2;	
					else if(formEntity.format.type == FormatTypes.numericStepper.type)
						return 3;		
					else if(formEntity.format.type == FormatTypes.dataGrid.type)
						return 6;	
					else if(formEntity.format.type == FormatTypes.textArea.type)
						return 7;			
					else if(formEntity.format.type == FormatTypes.checkBox.type)
						return 8;	
					else
						return 4;							
				}
				
				public var newValue:String;
				
				private var _data:Object;
				
				public override function get data():Object{
					return this._data;		
				}
				[Bindable]
				public override function set data(data:Object):void{
					if(targetFormItem != null){
						loadFormItem(targetFormItem);
						
						if(data != null){
							this.newValue = data.toString();
							presentData();		
						}
					}					
				}
				
				private function generateData():void{
					var valueObj:String;
						
					var typeNum:int = getContentsIndex(_formItem);
					
					switch(typeNum){
						case 0:// 라디오
							valueObj = String(valueRadio.selectedValue);						
							break;
						case 1:// 콤보
							if(_formItem.format.listType == FormListType.STATIC){								
								valueObj = String(valueCombo.selectedItem);
							}else if(_formItem.format.listType == FormListType.CODE){
								// 코드
							}else{
								// 폼
							}
							break;
						case 2:// 데이트
							valueObj = DateField.dateToString(valueDateField.selectedDate, "YYYY-MM-DD");											
							break;
						case 3:// 뉴머릭
							valueObj = valueNumericStepper.value.toString();
							break;
						case 5:// 리스트 								
							break;
						case 6:// 그리드
							break;
						case 7:// text area
							valueObj = textEntityArea.text;
							break;
						case 8:// text area
							valueObj = (valueCheckBox.selected)?"true":"false";
							break;
						default:// 텍스트
							valueObj = textEntityInput.text;
					}
	
					newValue = valueObj;	
					
					presentData();
				}
				
				private function presentData():void{
					if(newValue != null){
						var value:String = newValue;
					
						var typeNum:int = getContentsIndex(_formItem);
						
						switch(typeNum){
							case 0:// 라디오
								valueRadio.selectedValue = value;						
								break;
							case 1:// 콤보
								var index:int = -1;
								
								if(_formItem.format.listType == FormListType.STATIC){
									// 정적인 리스트
									for(var i:int = 0 ; i < ArrayCollection(valueCombo.dataProvider).length ; i++){
										if(value == String(ArrayCollection(valueCombo.dataProvider).getItemAt(i))){
											index = i;
										}
									} 
								}else if(_formItem.format.listType == FormListType.CODE){
									// 코드
								}else{
									// 폼
								}
								
								// value가 없는 것으로 치고 combo에 추가하고 선택
								if(index == -1){
									if(_formItem.format.listType == FormListType.STATIC){
									// 정적인 리스트
										ArrayCollection(valueCombo.dataProvider).addItem(value);
									}
									
									valueCombo.selectedIndex= ArrayCollection(valueCombo.dataProvider).length - 1;
								}else{
									valueCombo.selectedIndex= index;	
								}
								
								break;
							case 2:// 데이트
								var date:Date = null;
								try{
									date = DateField.stringToDate(value, "YYYY-MM-DD");
									valueDateField.selectedDate = date;
								}catch(e:Error){
									valueDateField.text = "????/??/??"
								}							
								break;
							case 3:// 뉴머릭
								var valueNum:int;
								
								try{
									valueNum = new int(value);
									valueNumericStepper.value = valueNum;
								}catch(e:Error){
									valueNumericStepper.value = 0;
								}
								break;
							case 5:// 리스트 								
								break;
							case 6:// 그리드
								break;
							case 7:// text area
								textEntityArea.text = value;
								break;
							case 8:// text area
								if(value == true){
									valueCheckBox.selected = true;	
								}else{
									valueCheckBox.selected = false;	
								}
								break;
							default:// 텍스트
								textEntityInput.text = value;
						}
					}		
				}
				private var _inputValue:Object;
				
	            public function set text(text:String):void{
	            	this._inputValue = text;
	            }  
	            
	            public function get text():String{
	            	if(this.newValue != null) return this.newValue.toString();
	            	else if(this.data == null) return "";
	            	return this.data.toString();
	            }  
			]]>
		</mx:Script>
	<mx:ViewStack id="valueView" x="0" y="0" width="100%" height="100%" creationPolicy="all">
		
		<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:RadioButtonGroup id="valueRadio" change="{generateData()}"/>
			<mx:HBox id="valueRadioBox" x="0" y="0" width="100%" height="100%">
				
			</mx:HBox>
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:ComboBox id="valueCombo" x="0" y="0" width="100%" height="100%" change="{generateData()}"/>
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:DateField id="valueDateField" x="0" y="0" formatString="YYYY-MM-DD" width="100%" height="100%" change="{generateData()}"/>
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%"  horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:NumericStepper id="valueNumericStepper" x="0" y="0" width="100%" height="100%" change="{generateData()}"/>
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:TextInput id="textEntityInput" x="0" y="0" text="{data}" width="100%" height="100%" change="{generateData()}"/>
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:TextArea id="textEntityArea" x="0" y="0" text="{data}" width="100%" height="100%" change="{generateData()}"/>
		</mx:Canvas>
		<mx:Canvas id="checkBoxCanvas" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:CheckBox id="valueCheckBox" x="{(checkBoxCanvas.width - valueCheckBox.width)/2}" y="{(checkBoxCanvas.height - valueCheckBox.height)/2}"
				 change="{generateData()}"/>
		</mx:Canvas>
	</mx:ViewStack>
</mx:Canvas>


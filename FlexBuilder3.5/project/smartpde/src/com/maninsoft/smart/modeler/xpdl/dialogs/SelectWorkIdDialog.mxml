<?xml version="1.0" encoding="utf-8"?>
<AbstractSimpleDialog xmlns="com.maninsoft.smart.common.dialog.*" xmlns:mx="http://www.adobe.com/2006/mxml"	height="100%" width="100%">
	<mx:Script>
		<![CDATA[
			import com.maninsoft.smart.modeler.xpdl.server.Server;
			import com.maninsoft.smart.modeler.xpdl.XPDLEditor;
			import com.maninsoft.smart.modeler.xpdl.server.service.GetPackageListService;
			import com.maninsoft.smart.modeler.xpdl.server.service.GetCategoryListService;
			import com.maninsoft.smart.formeditor.model.FormEntity;
			import com.maninsoft.smart.workbench.common.assets.WorkbenchIconLibrary;
			import com.maninsoft.smart.workbench.common.model.WorkPackage;
			import com.maninsoft.smart.workbench.common.model.WorkCategory;
			import com.maninsoft.smart.formeditor.refactor.event.service.FormPersistenceEvent;
			import com.maninsoft.smart.formeditor.model.FormRef;
			import com.maninsoft.smart.formeditor.FormEditorBase;
			import com.maninsoft.smart.workbench.common.assets.TreeAssets;
			import mx.controls.Button;
			import mx.collections.ArrayCollection;

			import flash.display.DisplayObject;
			import flash.events.Event;
			import flash.events.FocusEvent;

			import mx.collections.ArrayCollection;
			import mx.controls.Tree;
			import mx.core.Application;
			import mx.core.Container;
			import mx.core.UIComponent;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			import mx.managers.PopUpManager;

			//----------------------------------------------------------------------
			// Class Variables
			//----------------------------------------------------------------------

			private static var _dialog: SelectWorkIdDialog;

			//----------------------------------------------------------------------
			// Variables
			//----------------------------------------------------------------------

			[Bindable]
			private var _workIds: ArrayCollection;

			private var _server: Server;
			private var _acceptFunc: Function;
			private var _openingItem: WorkCategory;
			private var _editor: XPDLEditor;
			private var _workType:String = null;

			//----------------------------------------------------------------------
			// Class methods
			//----------------------------------------------------------------------

			public static function execute(server: Server, parent:DisplayObject, current:Object, acceptFunc: Function, workType:String=null, position:Point=null, width:Number=0, height:Number=0): void {
				if (!server)
					return;
					
				_dialog = PopUpManager.createPopUp(parent, SelectWorkIdDialog, false) as SelectWorkIdDialog;

				_dialog._server = server;
				_dialog._acceptFunc = acceptFunc;
				_dialog._workType = workType;
				if(position){
					_dialog.x = position.x;
					_dialog.y = position.y;
				}else{
					PopUpManager.centerPopUp(_dialog);	
				}
	
				if(width) _dialog.width = width;
				if(height) _dialog.height = height;
	
				_dialog.getWorkIds();

				_dialog.load(current);
				_dialog.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, _dialog.dialogFocusChange);
				
				_dialog.workIdTree.setFocus();
	
			}

			//----------------------------------------------------------------------
			// Internal methods
			//----------------------------------------------------------------------
			private function getWorkIds():void{
				this._workIds = new ArrayCollection();
				_server.getCategoryList(null, getCategoryListResult);
	 			function getCategoryListResult(svc:GetCategoryListService):void{
	 				var internalWork:WorkPackage = new WorkPackage();
					if(_workType == WorkPackage.PACKAGE_TYPE_GANTT){
						internalWork.id = WorkPackage.INTERNAL_PROCESS_ID;
						internalWork.name = WorkPackage.INTERNAL_GANTT_NAME;
						internalWork.type = WorkPackage.PACKAGE_TYPE_GANTT;
	 					_workIds.addItem(internalWork);					
						_workIds.addItem(svc.categories[0]);
 						WorkCategory(_workIds[1]).loaded=false;			 						
					}else if(_workType == WorkPackage.PACKAGE_TYPE_PROCESS){
/*						internalWork.name = WorkPackage.INTERNAL_PROCESS_NAME;
						internalWork.type = WorkPackage.PACKAGE_TYPE_PROCESS;						
	 					_refProcessIds.addItem(internalWork);					
*/
						_workIds.addItem(svc.categories[0]);
 						WorkCategory(_workIds[0]).loaded=false;			 						
					}else if(_workType == WorkPackage.PACKAGE_TYPE_SINGLE){
						internalWork.id = WorkPackage.EMPTY_WORK_ID;
						internalWork.name = WorkPackage.EMPTY_WORK_NAME;
						internalWork.type = WorkPackage.PACKAGE_TYPE_SINGLE;
	 					_workIds.addItem(internalWork);					
						_workIds.addItem(svc.categories[0]);
 						WorkCategory(_workIds[1]).loaded=false;			 												
					}else{
						_workIds.addItem(svc.categories[0]);
 						WorkCategory(_workIds[0]).loaded=false;			 																		
					}
	 			}	
			}

			private function load(current: Object): void {
/*				if (current) {
					if(String(current).indexOf("@")>=0){
						var selectedItem:User = findInDepartment(_dialog._organization as Department, String(current));
						var selectedObject:DisplayObject = _dialog.organizationTree.getChildByName(selectedItem.name);
						var selectedIndex:int = 1;
						_dialog.organizationTree.selectedIndex = selectedIndex;
						function findInDepartment(children:Department, id:String):User{
							var item:Object;
							if(children.children.length>0){
								for each(item in children.children){
									if(item is User && User(item).id == id){
										return item as User;
									}else if(item is Department){
										var foundItem:User = findInDepartment(item as Department, id);
										if(foundItem){
											return foundItem;
										}
									}
								}
							}
							return null;
						}
						_dialog.organizationTree.expandItem(_dialog.organizationTree.selectedItem, true);
						_dialog.organizationTree.setFocus();
					}else{
						_dialog.tn.selectedIndex=1;
						for each(var formField:TaskFormField in _dialog._formFields){
							if(formField.id == current){
								_dialog.formFieldDG.selectedItem=formField;								
							}
						}
						_dialog.formFieldDG.setFocus();
					}
				}else{
					organizationTree.setFocus();
					organizationTree.expandChildrenOf(organizationTree.dataProvider[0], true);
				}
*/			}

			private function closeDialog(accept: Boolean = true): void {
				if (accept && (_acceptFunc != null) && workIdTree.selectedItem)
					_acceptFunc(workIdTree.selectedItem);
		
				PopUpManager.removePopUp(this);
			}

			//----------------------------------------------------------------------
			// Event handlers
			//----------------------------------------------------------------------

			private function dialogFocusChange(event: FocusEvent): void {
				if(	(event.relatedObject == _dialog) ||
					((event.relatedObject is UIComponent) && (UIComponent(event.relatedObject).parentDocument == _dialog)) ||
					(_dialog.workIdTree && _dialog.workIdTree.contains(event.relatedObject))){
						return;
				}		
				closeDialog(false);
			}

			//------------------------
			// Dialog
			//------------------------

			private function dlg_keyDown(event: KeyboardEvent): void {
				if (event.keyCode == Keyboard.ESCAPE){
					closeDialog(false);
				}
			}	

			//------------------------
			// refFormIdTree
			//------------------------

			private function workIdIcon(item:Object): Class{
				return item.icon;
			}

			private function workIdTree_itemClick(event:ListEvent): void {
				if(Tree(event.target).selectedItem is WorkPackage){
					closeDialog(true);
				}
				return;
			}

			private function workIdTree_itemOpening(event: TreeEvent): void {
				if(event.item is WorkCategory) {
					_openingItem = event.item as WorkCategory;
		
					if (!_openingItem.loaded) {
						event.preventDefault();
						var childrenLoaded:Boolean=false;
						var packageLoaded:Boolean=false;
						_server.getCategoryList(_openingItem.id, getCategoryListResult)
			 			function getCategoryListResult(svc: GetCategoryListService):void{
 							_openingItem.addItems(svc.categories);
			 				childrenLoaded=true;
			 				if(packageLoaded){
			 					_openingItem.loaded=true;
			 					workIdTree_childrenLoaded();
			 				}
			 			}
						_server.getPackageList(_openingItem.id, getPackageListResult);
			 			function getPackageListResult(svc: GetPackageListService):void{
			 				var packages:Array = new Array();
							for each(var workPackage:WorkPackage in svc.packages){
			 					if(workPackage.id){
			 						if(workPackage.type == _workType || _workType==null){
			 								packages.push(workPackage);
			 						}
		 						}
		 					}						
 							_openingItem.addItems(packages);
			 				packageLoaded=true;
			 				if(childrenLoaded){
			 					_openingItem.loaded=true;
			 					workIdTree_childrenLoaded();
			 				}
			 			}	
					}
				}
			}
			
			private function workIdTree_childrenLoaded(): void {
				workIdTree.expandItem(_openingItem, true);
			}
		]]>
	</mx:Script>
    <mx:Tree id="workIdTree" styleName="selectWorkIdTree" showRoot="false" width="100%" wordWrap="false" showDataTips="true"
		disclosureClosedIcon="{TreeAssets.plusIcon}" disclosureOpenIcon="{TreeAssets.minusIcon}"
        iconFunction="workIdIcon" verticalScrollPolicy="auto" horizontalScrollPolicy="off" borderStyle="none"
		itemClick="workIdTree_itemClick(event)" dataProvider="{_workIds}" itemOpening="workIdTree_itemOpening(event)">
	</mx:Tree>
</AbstractSimpleDialog>

<?xml version="1.0" encoding="utf-8"?>
<SmartChart xmlns="mxmlComponet.gadget.chart.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
	xmlns:axis="mxmlComponet.home.chartInfo.axis.*" borderColor="#ffffff">
	<mx:Script>
		<![CDATA[
			import mx.charts.LinearAxis;
			import mx.events.ListEvent;
			import mx.controls.ComboBox;
			import mx.charts.renderers.CrossItemRenderer;
			import mx.graphics.Stroke;
			import mx.charts.HitData;
			import mx.charts.series.items.PlotSeriesItem;
			import mx.charts.series.PlotSeries;
			import mx.graphics.LinearGradient;
			import mx.collections.XMLListCollection;
			import mxmlComponet.gadget.ChartGadget2;
			
			private var repeatDelay:int = 25;
			private var repeatCount:int = 40;
			private var repeat:int = 0;
			override public function set chartXml(xml:XML):void{
				_chartXml = xml;
				tranceResArray = [];
				ChartXmlUtil.xyMakeTitle(_chartXml, grouping.label, valueInfo.label);
				grouping.label.text = valueInfo.label.text;
				ChartXmlUtil.unitTitle(_chartXml, unitInfo);
				ChartXmlUtil.makeChartXml(chartType, _chartXml, tranceXml, tranceResArray, repeatCount);
				plotchart.dataProvider = new XMLListCollection(tranceXml.res);
//				plotchart.dataProvider = new XMLListCollection(tranceResArray[repeat].res);
//				var timerSlide: Timer = new Timer(repeatDelay, repeatCount-1);
//				timerSlide.addEventListener(TimerEvent.TIMER, doTimerSlide);
//				timerSlide.start();
				var myAC:XMLListCollection = new XMLListCollection(tranceXml.act);
				var seriesArray:Array = new Array;
				for (var i:int = 0; i < myAC.length; i++){
					for(var j:int=i+1; j<myAC.length; j++){
						var plot:PlotSeries = new PlotSeries;
						plot.xField = myAC.getItemAt(i).attribute("name");
						plot.yField = myAC.getItemAt(j).attribute("name");
						plot.displayName = myAC.getItemAt(i) + "/" + myAC.getItemAt(j);						
						seriesArray.push(plot);
					}
				}
				plotchart.series = seriesArray;
				
				matrixObj.xmlResult = xml;
				plotchart.dataTipFunction = function displayDataTip(e:HitData):String {
					var si:PlotSeriesItem = e.chartItem as PlotSeriesItem;
					var s:String;
						s = "<font size='11'>"+ PlotSeries(si.element).displayName + "\n" +  numForm.format(si.xNumber) + "/" + numForm.format(si.yNumber) + "</font><br/>";
					return s;};
				
			}

			private function doTimerSlide(event:TimerEvent):void{
				plotchart.dataProvider = new XMLListCollection(XML(tranceResArray[++repeat]).res);
				if(repeat+1==repeatCount)
					plotchart.dataProvider = new XMLListCollection(tranceXml.res);

			}			
/*
			private function goToChartType(event:ListEvent):void{
				if(ComboBox(event.target).selectedItem)
					if(ComboBox(event.target).selectedItem != this.chartType)
						ChartGadget2(parent).goToChart(ComboBox(event.target).selectedItem.data, this.chartXml);
			}
*/
			override public function set chartViewType(viewType:String): void{
				if(viewType == "CHART"){
					chartBox.visible = true;
					matrixBox.visible = false;
					chartBox.percentHeight = 95;
					matrixBox.height = 0;
				}else if(viewType=="MATRIX"){
					matrixBox.visible = true;
					chartBox.visible = false;
					matrixBox.percentHeight = 95;
					chartBox.height = 0;
				}
			}
/*			
			private function goChartAndMatrix(event:MouseEvent):void{
				var objId:String = Button(event.target).id;
				if(objId=="chartMove"){
					chartBox.visible = true;
					matrixBox.visible = false;
					chartBox.percentHeight = 95;
					matrixBox.height = 0;
				}else if(objId=="matrixMove"){
					matrixBox.visible = true;
					chartBox.visible = false;
					matrixBox.percentHeight = 95;
					chartBox.height = 0;
				}
			}
*/
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%" verticalGap="2" verticalAlign="middle" borderColor="#ffffff">
		<mx:HBox width="100%" height="0">
			<mx:HBox width="50%" height="30">
				<mx:Label id="unitInfo" width="50%"/>
			</mx:HBox>
			<mx:HBox width="50%" height="30" horizontalAlign="right">
				<mx:Legend id="legendBox" visible="false" width="0" labelPlacement="right" direction="horizontal" dataProvider="{plotchart}"/>
				<mx:Spacer width="20"/>
<!--
				<mx:Button id="chartMove" toolTip="{resourceManager.getString('ChartGadgetETC', 'ChartViewTTip')}"  click="goChartAndMatrix(event);" styleName="columnBtn"/>
				<mx:Button id="matrixMove" toolTip="{resourceManager.getString('ChartGadgetETC', 'MatrixViewTTip')}"  click="goChartAndMatrix(event);" styleName="gridBtn"/>
				<mx:Spacer width="10"/>
-->
			</mx:HBox>
		</mx:HBox>
		<mx:VBox id="chartBox" width="100%" height="100%" borderStyle="solid" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" borderColor="#ffffff">
			<mx:HBox width="100%" height="100%" horizontalGap="2" horizontalAlign="center" verticalAlign="middle" borderColor="#ffffff">
				<mx:VBox width="30" height="100%" horizontalAlign="center" verticalAlign="middle" id="YBox">
					<axis:CustormLabel id="valueInfo" width="{YBox.height}" height="20" angle="270" widthAndHeightChange="true" rotateble="true" />
				</mx:VBox>					
				<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" id="chartArea">
			        <mx:PlotChart id="plotchart" styleName="plotChartStyle" height="100%" width="100%" showDataTips="true">
			        	<mx:horizontalAxis>
			        		<mx:LinearAxis labelFunction="{defineAxisLabel}"/>
			        	</mx:horizontalAxis>
			        	<mx:verticalAxis>
			        		<mx:LinearAxis labelFunction="{defineAxisLabel}"/>
			        	</mx:verticalAxis>
			        </mx:PlotChart>
		        </mx:VBox>			
			</mx:HBox>	
			<mx:HBox width="100%" height="30" horizontalAlign="center" verticalAlign="middle" id="XBox">
				<axis:CustormLabel id="grouping" width="100%" height="20" rotateble="false" widthAndHeightChange="false"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox id="matrixBox" width="100%" height="0" borderStyle="solid" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" borderColor="#ffffff"
			 visible="false">
			 <ChartTranceMatrix width="100%" height="100%" id="matrixObj"/>
		</mx:VBox>
	</mx:VBox>
</SmartChart>
